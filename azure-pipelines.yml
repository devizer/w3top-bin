# https://mattvsts.github.io/2020/01/07/create-a-build-matrix-with-azure-pipelines/

trigger:
- master


strategy:
  matrix:
    'ARMv7 Ubuntu 20.04':
      IMAGE: "multiarch/ubuntu-debootstrap:armhf-focal"
      SCRIPT: "debian_prepare"
      Multiarch: 'True'
    'ARMv7 Ubuntu 18.04':
      IMAGE: "multiarch/ubuntu-debootstrap:armhf-bionic"
      SCRIPT: "debian_prepare"
      Multiarch: 'True'
    'ARMv7 Ubuntu 16.04':
      IMAGE: "multiarch/ubuntu-debootstrap:armhf-xenial"
      SCRIPT: "debian_prepare"
      Multiarch: 'True'
    'ARMv7 Ubuntu 14.04':
      IMAGE: "multiarch/ubuntu-debootstrap:armhf-trusty"
      SCRIPT: "debian_prepare"
      Multiarch: 'True'

    'ARMv7 Debian 11':
      IMAGE: "multiarch/debian-debootstrap:armhf-bullseye"
      SCRIPT: "debian_prepare"
      Multiarch: 'True'
    'ARMv7 Debian 10':
      IMAGE: "multiarch/debian-debootstrap:armhf-buster"
      SCRIPT: "debian_prepare"
      Multiarch: 'True'
    'ARMv7 Debian 9':
      IMAGE: "multiarch/debian-debootstrap:armhf-stretch"
      SCRIPT: "debian_prepare"
      Multiarch: 'True'
    'ARMv7 Debian 8':
      IMAGE: "multiarch/debian-debootstrap:armhf-jessie"
      SCRIPT: "debian_prepare"
      Multiarch: 'True'

    'ARM-64 Debian 9':
      IMAGE: "multiarch/debian-debootstrap:arm64-stretch"
      SCRIPT: "debian_prepare"
      Multiarch: 'True'

    'CentOS 6.10 and MySQL 5.1 (wget)':
      IMAGE: "centos:6.10"
      SCRIPT: "mysql_51_on_centos_6; centos_wget_only"
    'CentOS 6.10 and PostgreSQL 11.4 (curl)':
      IMAGE: "centos:6.10"
      SCRIPT: "pg_11_on_centos_6 && centos_curl_only"
    'CentOS 7.6 and sqlite (curl)':
      IMAGE: "centos:7.0.1406"
      SCRIPT: "centos_wget_only"
    'CentOS 8':
      IMAGE: "centos:8"
      SCRIPT: "centos_curl_only"

    'OpenSUSE leap 42':
      IMAGE: 'opensuse/leap:42'
      SCRIPT: 'opensuse_prepare'
    'OpenSUSE leap 15':
      IMAGE: 'opensuse/leap:15'
      SCRIPT: 'opensuse_prepare'
    'OpenSUSE leap Tumbleweed':
      IMAGE: 'opensuse/tumbleweed'
      SCRIPT: 'opensuse_prepare'

    'Gentoo (no multilib)':
      IMAGE: 'gentoo/stage3-amd64-nomultilib'
      SCRIPT: 'gentoo_prepare; HTTP_HOST="+"; export HTTP_HOST'
    'Gentoo Hardened (no multilib)':
      IMAGE: 'gentoo/stage3-amd64-hardened-nomultilib'
      SCRIPT: 'gentoo_prepare; HTTP_HOST="+"; export HTTP_HOST'
    'Arch':
      IMAGE: 'archlinux:base'
      SCRIPT: 'pacman -Sy --noconfirm sudo tar'
    'Manjaro':
      IMAGE: 'manjarolinux/base'
      SCRIPT: 'pacman -Syu --noconfirm haveged; pacman -Sy --noconfirm sudo tar'
    'Amazon Linux v1':
      IMAGE: "amazonlinux:1"
      SCRIPT: "yum install tar sudo -y"
    'Amazon Linux v2':
      IMAGE: "amazonlinux:2"
      SCRIPT: "yum install tar sudo -y"
    'Debian 8.9':
      IMAGE: "debian:8.9"
      SCRIPT: "debian_prepare"
    'Debian 9':
      IMAGE: "debian:9"
      SCRIPT: "debian_prepare"
    'Debian 10':
      IMAGE: "debian:10"
      SCRIPT: "debian_prepare"
    'Debian 11':
      IMAGE: "debian:11"
      SCRIPT: "debian_prepare"
    'Ubuntu 22.04':
      IMAGE: "ubuntu:22.04"
      SCRIPT: "debian_prepare"
    'Ubuntu 21.10':
      IMAGE: "ubuntu:21.10"
      SCRIPT: "debian_prepare"
    'Ubuntu 20.04':
      IMAGE: "ubuntu:18.04"
      SCRIPT: "debian_prepare"
    'Ubuntu 18.04':
      IMAGE: "ubuntu:18.04"
      SCRIPT: "debian_prepare"
    'Ubuntu 16.04':
      IMAGE: "ubuntu:16.04"
      SCRIPT: "debian_prepare"
    'Ubuntu 14.04':
      IMAGE: "ubuntu:14.04"
      SCRIPT: "debian_prepare"
    'Fedora 24':
      IMAGE: "fedora:24"
      SCRIPT: "fedora_prepare"
    'Fedora 25':
      IMAGE: "fedora:25"
      SCRIPT: "fedora_prepare"
    'Fedora 26':
      IMAGE: "fedora:26"
      SCRIPT: "fedora_prepare"
    'Fedora 32':
      IMAGE: "fedora:32"
      SCRIPT: "fedora_prepare"

    'Fedora 33':
      IMAGE: "fedora:33"
      SCRIPT: "fedora_prepare"
    'Fedora 34':
      IMAGE: "fedora:34"
      SCRIPT: "fedora_prepare"
    'Fedora 35':
      IMAGE: "fedora:35"
      SCRIPT: "fedora_prepare"
    'Fedora 36':
      IMAGE: "fedora:36"
      SCRIPT: "fedora_prepare"

pool:
  vmImage: 'ubuntu-18.04'


steps:

- script: |
    script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
    Say "Register qemu user static"
    time docker run --rm --privileged multiarch/qemu-user-static:register --reset
  condition: ne(variables.Multiarch, '')
  displayName: 'QEMU'

- script: |
    Say "IP"
    ip addr show
    Say "if config"
    sudo ifconfig -a
    Say "Reconfigure NET"
    echo '
    net.ipv4.ip_forward = 1
    vm.swappiness = 20
    fs.inotify.max_user_watches = 524288
    ' | sudo tee -a /etc/sysctl.conf
    sudo sysctl -p
    sudo sysctl -p --system

    Say "FINAL IP"
    ip addr show
    Say "FINAL if config"
    sudo ifconfig -a
  displayName: 'NET'

- script: |
    set -e
    set -u
    function wait_for_http() {
      u="$1"; t=30; 
      printf "Waiting for [$u] during $t seconds ..."
      while [ $t -ge 0 ]; do t=$((t-1)); curl --connect-timeout 3 -skf "$u" >/dev/null && printf " OK\n"; if [ $? -eq 0 ]; then return; fi; printf "."; sleep 1; done
      printf " FAIL\n";
    }

    script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
    Say --Reset-Stopwatch
    Say "Pull $(IMAGE)"
    docker pull $(IMAGE)
    Say "Start image $(IMAGE)"
    docker run --privileged -d --hostname w3top-container --name w3top -p "5050:5050" "$IMAGE" sh -c "while true; do sleep 42; done"
    if [[ "$IMAGE" == alpine* ]]; then docker exec -t w3top sh -c "apk update; apk add curl tar sudo bzip2 bash; apk add bash icu-libs ca-certificates krb5-libs libgcc libstdc++ libintl libstdc++ tzdata userspace-rcu zlib libssl1.0"; fi
    
    Say "Version for $(IMAGE)"
    docker exec -t w3top bash -c "cat /etc/*release; mkdir -p /etc/init.d"


    Say "RUN w3top container and install sudo, tar, curl|wget, etc"
    cat tests/*.sh > tests/test-sources.sh; chmod +x tests/test-sources.sh
    docker cp tests/test-sources.sh w3top:/test-sources.sh
    docker cp /usr/local/bin/Say w3top:/usr/local/bin/Say
    docker exec -t w3top bash -c "echo HOME: \$HOME; source /test-sources.sh; $SCRIPT && Say 'INSTALLING W3Top' && install_w3top && Say 'TEST FINISHED. Checking app health.'"
    
    Say "Wait for w3top via http://localhost:5050 for $(IMAGE)"
    wait_for_http http://localhost:5050
    Say "Headers"
    curl -I http://localhost:5050 || curl -I http://localhost:5050 || curl -I http://localhost:5050 || exit 250

  displayName: 'Test All'

- script: |
   sleep 9
   docker exec -t w3top bash -c "if [[ -f /etc/systemd/system/w3top.service ]]; then sudo journalctl -u w3top.service; else cat /tmp/w3top.log; fi" |
   tee $SYSTEM_ARTIFACTSDIRECTORY/w3top.log

   docker cp w3top:/etc/init.d/w3top $SYSTEM_ARTIFACTSDIRECTORY/w3top.init.sh
   docker cp w3top:/etc/systemd/system/w3top.service $SYSTEM_ARTIFACTSDIRECTORY/w3top.service.ini || true
  condition: succeededOrFailed()
  displayName: 'Grab w3top log'

- task: PublishBuildArtifacts@1
  condition: succeededOrFailed()
  inputs:
    pathtoPublish: '$(System.ARTIFACTSDIRECTORY)'
    artifactName: '$(Agent.JobName)'
